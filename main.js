!function(){"use strict";class e{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}enableValidation(){this._setEventListeners()}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_checkInputValidity(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.validity.valid?(e.classList.remove(this._settings.inputErrorClass),t.textContent=""):(e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage)}_toggleButtonState(){this._inputList.some((e=>!e.validity.valid))?(this.disableButton(),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1)}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent=""}))}disableButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}}class t{constructor(e,t,s,n){this._name=e.name,this._link=e.link,this._id=e._id,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteCard=n,this._data=e}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._toggleLike())),this._deleteButton.addEventListener("click",(()=>this._handleDeleteButtonClick())),this._cardImage.addEventListener("click",(()=>this._handleImageClick(this._name,this._link)))}_handleDeleteButtonClick(){this._handleDeleteCard(this)}_toggleLike(){this._likeButton.classList.contains("card__like-button_active")?this._api.unlikeCard(this._id).then((e=>{this._likeButton.classList.remove("card__like-button_active"),this._data.isLiked=!1})).catch((e=>console.error("Failed to unlike card:",e))):this._api.likeCard(this._id).then((e=>{this._likeButton.classList.add("card__like-button_active"),this._data.isLiked=!0})).catch((e=>console.error("Failed to like card:",e)))}_deleteCard(){this._element.remove()}generateCard(){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._cardImage=this._element.querySelector(".card__image"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._element.querySelector(".card__title").textContent=this._name,this._element.dataset.cardId=this._id,this._data.isLiked&&this._likeButton.classList.add("card__like-button_active"),this._setEventListeners(),this._element}}class s{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}clear(){this._container.innerHTML=""}}class n{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.querySelector(".modal__close").addEventListener("click",(()=>this.close())),this._popup.addEventListener("click",(e=>{e.target===this._popup&&this.close()}))}}class r extends n{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popup.querySelector(".modal__form"),this._inputList=this._form.querySelectorAll(".modal__input"),this._submitButton=this._form.querySelector(".modal__button")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t).then((()=>{this._form.reset(),this.close()})).catch((e=>{console.error("Error in form submission:",e)}))}))}close(){super.close()}}const a=[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],o={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},i=document.querySelector("#profile-edit-button"),l=document.querySelector("#profile-title-input"),c=document.querySelector("#profile-description-input"),d=document.querySelector(".profile__add-button"),h=document.querySelector("#profile-edit-modal .modal__form"),_=document.querySelector("#add-card-modal .modal__form"),u=document.querySelector("#avatar-edit-form"),m=document.querySelector(".profile__edit-avatar"),p=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._handleResponse)}setUserInfo(e){let{name:t,about:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._handleResponse)}setUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._handleResponse)}checkIfCardsExist(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._handleResponse).then((e=>e.length>0))}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._handleResponse)}deleteCard(e){return console.log("Attempting to delete card with ID:",e),fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>(console.log("DELETE response status:",e.status,e.statusText),e.ok?e.json().then((e=>(console.log("DELETE response data:",e),e))):Promise.reject(`Error: ${e.status}`))))}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._handleResponse)}unlikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._handleResponse)}getAppInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"ea954eb7-9cc5-4b86-a221-9efd3aedab32","Content-Type":"application/json"}});let v;p.getUserInfo().then((e=>{w.setUserInfo({name:e.name,job:e.about}),w.setAvatar(e.avatar)})).catch((e=>{console.error("Failed to fetch user info:",e)})),p.getInitialCards().then((e=>{v=new s({items:e,renderer:e=>{const t=I(e);v.addItem(t)}},".cards__list"),v.renderItems();const t=e.map((e=>e.name)),n=a.filter((e=>!t.includes(e.name)));return n.length>0?Promise.all(n.map((e=>p.addCard(e)))).then((()=>(console.log("New initial cards added to server."),p.getInitialCards()))):(console.log("All initial cards already exist on the server."),Promise.resolve(e))})).then((e=>{v.clear(),v.renderItems(e)})).catch((e=>{console.error("Error in card operations:",e)}));const f=new e(o,h);f.enableValidation();const g=new e(o,_);g.enableValidation(),new e(o,u).enableValidation();const b=new class extends n{constructor(e,t){super(e),this._handleConfirmAction=t,this._confirmButton=this._popup.querySelector("#confirm-delete-button"),this._cardInstance=null}open(e){super.open(),this._cardInstance=e}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",(()=>{this._cardInstance?this._handleConfirmAction(this._cardInstance).then((()=>this.close())).catch((e=>{console.error("Failed to delete card:",e)})):console.error("No card instance found for deletion")}))}}("#delete-card-modal",(e=>p.deleteCard(e._id).then((()=>{e._deleteCard()}))));function E(e){b.open(e)}b.setEventListeners();const k=new class extends n{constructor(e){super(e),this._popupImage=this._popup.querySelector(".modal__image"),this._popupCaption=this._popup.querySelector(".modal__image-description")}open(e){this._popupImage.src=e.link,this._popupImage.alt=e.name,this._popupCaption.textContent=e.name,super.open()}}("#card-picture-modal");function C(e,t){k.open({name:e,link:t})}k.setEventListeners();const L=new r("#profile-edit-modal",(e=>{const t=L._form.querySelector(".modal__button"),s=t.textContent;t.textContent="Saving...",p.setUserInfo({name:e.title,about:e.description}).then((e=>(w.setUserInfo({name:e.name,job:e.about}),new Promise((e=>setTimeout(e,1e3)))))).then((()=>{L.close()})).catch((e=>{console.error("Failed to update user info:",e)})).finally((()=>{t.textContent=s}))})),S=new r("#avatar-edit-modal",(e=>{const t=S._form.querySelector(".modal__button"),s=t.textContent;t.textContent="Saving...";const n={avatar:e["avatar-url"]};return p.setUserAvatar(n).then((e=>(console.log("Avatar update data:",e),w.setAvatar(e.avatar),new Promise((e=>setTimeout(e,1e3)))))).then((()=>{S.close()})).catch((e=>{throw console.error("Failed to update avatar:",e),e})).finally((()=>{t.textContent=s}))}));S.setEventListeners();const y=new r("#add-card-modal",(e=>{const t=y._form.querySelector(".modal__button"),s=t.textContent;t.textContent="Saving...",p.addCard({name:e.title,link:e.description}).then((e=>{const t=I(e);return v.addItem(t),new Promise((e=>setTimeout(e,1e3)))})).then((()=>{y.close(),g.disableButton()})).catch((e=>{console.error("Failed to add new card:",e)})).finally((()=>{t.textContent=s}))}));function I(e){console.log("Creating card with data:",e);const s=new t(e,"#card-template",C,E);return s._api=p,s.generateCard()}L.setEventListeners(),y.setEventListeners(),i.addEventListener("click",(()=>{const e=w.getUserInfo();l.value=e.name,c.value=e.job,f.resetValidation(),L.open()})),d.addEventListener("click",(()=>{y.open()})),m.addEventListener("click",(()=>{S.open()}));const w=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:n}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(n)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,job:s,avatar:n}=e;t&&(this._nameElement.textContent=t),s&&(this._jobElement.textContent=s),n&&this.setAvatar(n)}setAvatar(e){this._avatarElement&&(this._avatarElement.src=e)}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".profile__image"})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,